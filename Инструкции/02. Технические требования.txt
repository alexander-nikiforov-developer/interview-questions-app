Технические требования к приложению "Java Interview Question App"

1. Используемые термины:
   - сервисные классы (service classes) - классы, содержащие бизнес логику
     или содержащие
     методы для выполнения определенной функции. Как правило, такие классы
     stateless, то есть содержат только final поля или не содержат полей.
     В реальных приложениях экземпляры таких классов часто создаются
     как singleton'ы (в единственном экземпляре). В нашем случае мы пока
     не будем
     реализовывать singleton паттерн для упрощения. Мы добавим его на следующей
     стадии средствами Spring Framework.
   - model классы - stateful классы, описывающие основные сущности, с которыми
     работает приложение и содержащие состояние, то есть non final поля.
     В реальных приложениях такие классы часто используются в качестве
     моделей, для сохранения данных в базы данных.
     Если используется Spring Data, такие классы помечаются аннотацией @Entity
     и используются соответствующим фреймворком.
     На данной стадии создания приложения это будут просто классы.
   - dto классы - классы для конвертации данных в удобный формат для дальнейшей
     передачи например в качестве ответа на запрос пользователя. Могут быть
     stateful
     или stateless. Можно использовать java records.

2. Избегайте создания экземпляров объектов сервисов,
   котроллеров и dao внутри кода разных классов.
   Для создания экземляров основных классов, содержащих логику приложения,
   заведите отдельный package и класс. Например package - objects,
   класс ObjectInitializer. В будущем при переходе на dependency injection
   с применением Spring, этот пакет и класс будут удалены.
   Экземпляры объектов, предназначенные для хранения данных и
   использующиеся однократно (model classes, dto), могут быть
   созданы в коде там где это необходимо.

2. Реализуйте упрощенную многослойную архитектуру путем разделения
   кода на пакеты (packages) и классы.
   На данном этапе она может показаться избыточной, но мы сразу будем
   изучать структуру, которая чаще всего применяется в реальных приложениях.

   - слой "model" (можно завести package c таким же названием). Также иногда
   используется название domain. Этот пакедж будет содержать класс,
   описывающий структуру одного интервью вопроса. Такой класс называется
   POJO - plain old java object - класс содержащий не финальные поля,
   конструктор или конструкторы, геттеры и сеттеры, методы equals(),
   hashcode(), toString(). Такие классы подходят для того чтобы работать
   с фреймворком Hibernate и Spring Data JPA. Поэтому мы не используем
   record classes в данном случае.

   - Слой cli (command line interface) (можно завести package c таким же названием) должен содержать код, ответственный за запуск и
    завершение работы приложения, прием команд от пользователя через терминал.
    Для получения ввода пользователя используйте классы Scanner и System.in (смотри отдельное видео).
    Он должен иметь связь (зависимость) со слоем
   "controller" и делегировать контроллеру выполнения задач по добавлению вопросов и извлечению вопросов.

   - слой "controller" (можно завести package c таким же названием) это заготовка для будущего контроллера в Spring Web приложении. В реальных приложениях вместо имени "controller" иногда используют имя "api".
   Контроллер отвечает за определение того какие параметры принимаются на вход и какие возвращаются клиенту (пользователю или вызывающему приложению). В контроллере также может быть реализована валидация и обработка исключений/ошибок. В нашем случае контроллер будет формальным, не будет иметь какой то логики и будет делегировать задачи сервисному классу. Контроллер зависит от слоя "service".

   - слой "service" содержит всю бизнес логику приложения. На данном этапе он также будет формальным и просто будет делегировать задачи dao (data access object) слою, выполняя маппинг.
   При получении данных от dao мы должны будем сконвертировать полученные данные в формат, пригодный для передачи в контроллер. В нашем случае это не обязательно, но мы сразу будем это делать, чтобы соблюдать правильную архитектуру для будущего перехода на Spring Data JPA. Конвертация делается поскольку в объектах, полученных из базы данных может быть информация, не предназначенная для передачи клиенту. Конвертируя ее в финальный вид и оставляем только то, что нужно. Объект, в который конвертируются данные как правило называется Dto объектом (data-transfer object, что соответствует названию ООП паттерна).

   - слой "dao" (data transfer object) отвечает за взаимодействие с
   хранилищем данных. Также может использоваться название "repository".
   В нашем случае мы реализуем только in memory DAO, который хранит
   данные в оперативной памяти, но поскольку в будущем мы хотим иметь
   возможность добавить реляционную базу данных, мы можем сразу организовать
   зависимость слоя service от интерфейса, который будет реализовывать наш
   In-memory dao объект. При добавлении в будущем dao объекта, ответственного
   за взаимодействие с реляционной базой данных, нам не придется менять код
   service слоя.

   - опционально вы можете создать package и класс отвечающий за добавление
   данных в in-memory хранилище при старте приложение. Это может быть полезно
   для тестирования.